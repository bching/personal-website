
<style>
  #map {
    height: 500px;
    width: 60%;
    margin: 0 0 0 15px;
  }
</style>
<section class="content-section col-400 center-self">
  <div class="grey bouncebox">
    <div class="flex-row flex-center">
      <p>
        This page is a collection of places that left an impression on me.
        A large portion are cafes and restaurants. But sprinkled around are parks and other random locations.
      </p>
    </div>
  </div>
</section>

  <span id="focused-country" style="display: none; font-size: 24px; font-family: 'Oswald', sans-serif;">
  </span>
  <div class="countries grid flex-row flex-center">
    <div>Japan</div>
    <div>Korea</div>
    <div>Thailand</div>
    <div>Germany</div>
    <div>Taiwan</div>
  </div>
  <div class="flex-row flex-center">
    <div id="map"></div>
    <div id="map-panel" class="col-250">
      <ul id="place-list">
      </ul>
    </div>
  </div>

  <script src="https://unpkg.com/leaflet@1.6.0/dist/leaflet.js"
    integrity="sha512-gZwIG9x3wUXg2hdXF6+rVkLF/0Vi9U8D2Ntg4Ga5I5BZpVkVxlJWbSQtXPSiUTtC0TjtGOmxa1AJPuV0CPthew=="
    crossorigin="">
  </script>
  <script>
  const layerClick = (e) => {
    console.log(e.target.feature)
    const title = e.target.feature.properties.Title;
    const addr = e.target.feature.properties.Location.Address;
    const coords = {
      lat: e.target.feature.geometry.coordinates[1],
      lng: e.target.feature.geometry.coordinates[0]
    }
    const popup = L.popup({minWidth: '50px'})
    .setLatLng({...coords})
    .setContent(`<p>${title}</p><p>${addr}</p>`)
    .openOn(mymap);
    mymap.panTo({...coords});
  }
  const onEachFeature = (feature, layer) => {
    layer.on({
      click: layerClick
    });
  }
  const geojsonMarkerOptions = {
    radius: 8,
    fillColor: "#ff7800",
    color: "#000",
    weight: 1,
    opacity: 1,
    fillOpacity: 0.8
  };

  const mymap = L.map('map').setView([51.505, -0.09], 13);
  mymap.scrollWheelZoom.disable();
  //L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}', {
  //  attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
  //  maxZoom: 18,
  //  id: 'mapbox/streets-v11',
  //  accessToken: 'pk.eyJ1IjoiYnljaGluZyIsImEiOiJja2JqZWZoM2cwbzlrMnNvNXo2bndqaDZqIn0.sMGelAYTcu6Qs4LrMUVlBA'
  //}).addTo(mymap);
  L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {
      attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
      maxZoom: 18,
      id: 'mapbox/streets-v11',
      tileSize: 512,
      zoomOffset: -1,
      accessToken: 'pk.eyJ1IjoiYnljaGluZyIsImEiOiJja2JqZWZoM2cwbzlrMnNvNXo2bndqaDZqIn0.sMGelAYTcu6Qs4LrMUVlBA'
      }).addTo(mymap);

  const locMap = new Map();
  if(places.features) {
    for(const place of places.features) {
      L.geoJSON(place, {
        onEachFeature: onEachFeature,
        pointToLayer: function (feature, latlng) {
          return L.circleMarker(latlng, geojsonMarkerOptions);
        }
      }).addTo(mymap);
      const countryCode = place.properties.Location["Country Code"] || null;
      const coords = {
        lat: place.geometry.coordinates[1],
        lng: place.geometry.coordinates[0]
      };

      if(countryCode) {
        if(!locMap.has(countryCode)) {
          locMap.set(countryCode, {coords, places: [
            {
              title: place.properties.Title,
              coords,
              addr: place.properties.Location.Address ? place.properties.Location.Address : null
            }
          ]});
          continue;
        }
        const countrySpecs = locMap.get(countryCode);
        const countryCoords = {...countrySpecs.coords};
        countryCoords.lat = (coords.lat + countryCoords.lat) / 2;
        countryCoords.lng = (coords.lng + countryCoords.lng) / 2;

        countrySpecs.places.push(
          {
            title: place.properties.Title,
            coords,
            addr: place.properties.Location.Address ? place.properties.Location.Address : null
          }
        );
        locMap.set(countryCode, countrySpecs);
      }
    }
  }

  const countryMapping = {"Korea": "KR", "Germany": "DE", "Japan": "JP", "Thailand": "TH", "Taiwan": "TW"};

  const zoomToPlace = (e) => {
    const title = e.target.innerHTML;
    const currCountry = document.getElementById('focused-country').innerHTML;
    const mappings = locMap.get(countryMapping[currCountry]);

    if(mappings.places && mappings.places.length > 0) {
      const place = mappings.places.find(place => {
        return place.title === title;
      });
      const popup = L.popup({maxWidth: 'auto'})
      .setLatLng({...place.coords})
      .setContent(`<p>${title}</p><p>${place.addr}</p>`)
      .openOn(mymap);
      mymap.panTo({...place.coords});
    }
  }

  const zoomToCountry = (e) => {
    if(e) {
      let target = "Japan";
      if(e && e.target) {
        target = e.target.innerHTML;
      }
      const loc = locMap.get(countryMapping[target]);
      mymap.panTo({...loc.coords});

      const countries = document.getElementsByClassName("countries")
        /*
      Object.entries(countries[0].children).forEach(country => {
        if(country[1].innerHTML === e.target.innerHTML &&
          country[1].className.indexOf("expand") === -1) {
            country[1].className += " expand";
          }
          else if(country[1].className.indexOf("expand") !== -1) {
            country[1].className = country[1].className.replace("expand", "");
          }
        })
        */
        const listEl = document.getElementById("place-list");
        listEl.innerHTML = "";
        for(const place of loc.places) {
          const li = document.createElement("li");
          li.className = "li-desc";
          li.onclick = zoomToPlace;
          li.appendChild(document.createTextNode(place.title));
          listEl.appendChild(li);
        }

        document.getElementById('focused-country').innerHTML = target;
      }
    }
    zoomToCountry({target: {innerHTML: "Japan"}});
    const countries = document.getElementsByClassName("countries");
    Object.entries(countries[0].children).forEach(country => {country[1].onclick = zoomToCountry})

    // TODO: add smooth scroll
    //
    // // Object.entries(document.getElementById('nav').children).forEach(section => console.log(section[1]))
    // document.querySelectorAll('#nav a').forEach(link => link.onclick = link.scrollIntoView())
    //
  </script>